all.x = TRUE)
combinedStats <- within(combinedStats, IsAllStar[!is.na(Conference)] <- 1)
counter = counter + 1
if (counter %% 2 == 0) {
if (length(allYearStatsVal) == 0) {
allYearStatsVal = combinedStats
}
else {
allYearStatsVal = rbind(allYearStatsVal, combinedStats)
}
} else {
if (length(allYearStatsTr) == 0) {
allYearStatsTr = combinedStats
}
else {
allYearStatsTr = rbind(allYearStatsTr, combinedStats)
}
}
}
# drop non numeric columns
trainingSet = getNumericalStats(allYearStatsTr)
validationSet = getNumericalStats(allYearStatsVal)
# calculate correlation
corrMatrix = calculateCorrelation(trainingSet, allYearStatsTr$IsAllStar)
## balance class if needed
if (balanceType == 1) {
allYearStatsBalanced = duplicateLowerData(allYearStatsTr, 0.4)
trainingSetBalanced = getNumericalStats(allYearStatsBalanced)
} else if (balanceType == 2) {
trainAllStarPlayers = allYearStatsTr[allYearStatsTr$IsAllStar == 1, ]
trainNonAllStarPlayers = allYearStatsTr[allYearStatsTr$IsAllStar == 0, ]
allYearStatsBalanced = trainAllStarPlayers
nonAllStarCount = dim(trainNonAllStarPlayers)[1]
for (i in 1:dim(trainAllStarPlayers)[1]) {
randomPlayerIndex =sample(1:nonAllStarCount, 1)
allYearStatsBalanced = rbind(allYearStatsBalanced, trainNonAllStarPlayers[randomPlayerIndex,])
}
} else {
allYearStatsBalanced = allYearStatsTr
trainingSetBalanced = trainingSet
}
View(allYearStatsBalanced)
## calculate balanced correlation
if (balanceType > 0) {
corrMatrixBalanced = calculateCorrelation(trainingSetBalanced, allYearStatsBalanced$IsAllStar)
}
function (x, y = NULL, use = "everything", method = c("pearson",
"kendall", "spearman"))
trainingSetBalanced = getNumericalStats(allYearStatsBalanced)
trainingSetBalanced = getNumericalStats(allYearStatsBalanced)
trainingSetBalanced = getNumericalStats(allYearStatsBalanced)
## calculate balanced correlation
if (balanceType > 0) {
corrMatrixBalanced = calculateCorrelation(trainingSetBalanced, allYearStatsBalanced$IsAllStar)
}
trainingSetBalanced = data.frame(scale(trainingSetBalanced))
validationSet = data.frame(scale(validationSet))
mlpCols <- c("Games", "Pts", "Reb", "Ast")
trainingSetBalanced = data.frame(trainingSetBalanced[ , (names(trainingSetBalanced) %in% mlpCols)])
validationSet = data.frame(validationSet[ , (names(validationSet) %in% mlpCols)])
trainingData = data.frame(trainingSetBalanced, allYearStatsBalanced$IsAllStar)
validationData = data.frame(validationSet, allYearStatsVal$IsAllStar)
colnames(trainingData)[5] = "IsAllStar"
colnames(validationData)[5] = "IsAllStar"
mlpResult = MLP(trainingData = trainingData,
validationData = validationData,
learningRate = 0.2,
numberOfHiddenNeurons = 2,
epoch = 20,
epochLogNumber = 2,
targetClass = "IsAllStar",
numberOfOutputNodes = 1,
writeResult = 1,
filePrefix = "MLP_Balanced_2")
for (i in 2:3) {
print(paste0("Mlp processing:", i))
mlpResult = MLP(trainingData = trainingData,
validationData = validationData,
learningRate = 0.2,
numberOfHiddenNeurons = i,
epoch = 200,
epochLogNumber = 10,
targetClass = "IsAllStar",
numberOfOutputNodes = 1,
writeResult = 1,
filePrefix = "MLP_Balanced_2")
}
trainingDataKNN = trainingData
validationDataKNN = validationData
knnResult = KNN(kN=10,
targetClass = "IsAllStar",
trainingData = trainingDataKNN,
validationData = validationDataKNN,
writeResult = 1)
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/main.R')
for (i in 2:10) {
print(paste0("Knn processing:", i))
knnResult = KNN(kN=i,
targetClass = "IsAllStar",
trainingData = trainingDataKNN,
validationData = validationDataKNN,
writeResult = 1)
}
knnResult = read.csv(file="result/KNN1.csv", header=TRUE, sep=";")
setwd("C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/")
knnResult
knnResult = data.frame(knnResult)
knnResult
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
setwd("C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/")
filePath = paste0("result/KNN_", i, ".csv")
innerKnnResult = read.csv(file=filePath, header=TRUE, sep=";")
innerKnnResult = read.csv(file=filePath, header=TRUE, sep=",")
innerKnnResult = read.csv(file="result/KNN_1.csv", header=TRUE, sep=",")
setwd("C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/")
innerKnnResult = read.csv(file="result/KNN_1.csv", header=TRUE, sep=",")
setwd("C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/")
innerKnnResult = read.csv(file="results/KNN_1.csv", header=TRUE, sep=",")
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
knnres
knnResult
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
knnResult
plot(data.frame(knnResult$X, knnResult$percentage),type="l",col=4, lty = 2, xlab="K Neighbor", ylab="Success Rate")
View(knnResult)
knnOutFile = paste0("KNN_min_out.csv")
write.csv(knnResult, knnOutFile)
knnOutFile = paste0("KNN_min_out.csv")
write.csv(knnResult, knnOutFile)
knnOutFile = paste0("KNN_min_out.csv")
write.csv(knnResult, knnOutFile)
colnames(knnResult) <- c("K", "True Positive", "False Positive", "True Negative", "False Negative")
knnOutFile = paste0("KNN_min_out.csv")
write.csv(knnResult, knnOutFile)
colnames(knnResult) <- c("K", "True Positive", "False Positive", "True Negative", "False Negative", "Percentage")
knnOutFile = paste0("KNN_min_out.csv")
write.csv(knnResult, knnOutFile)
colnames(knnResult) <- c("K", "True Positive", "False Positive", "True Negative", "False Negative", "%SuccessRate")
knnOutFile = paste0("KNN_min_out.csv")
write.csv(knnResult, knnOutFile)
filePath = paste0("MLP_Balanced_Filtered_2_Error_H_", 1, "_Epoch_1000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
filePath = paste0("result/MLP_Balanced_Filtered_2_Error_H_", 1, "_Epoch_1000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
filePath = paste0("results/MLP_Balanced_Filtered_2_Error_H_", 1, "_Epoch_1000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
innerMlpResult
trainPlot = data.frame(innerMlpResult$H, innerMlpResult$Train.CE)
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train.CE)
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train.CE)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate")
filePath = paste0("results/MLP_Balanced_Filtered_2_Error_H_", 1, "_Epoch_1000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train.CE)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val.CE)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate")
lines(subValidationError,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
filePath = paste0("results/MLP_Balanced_Filtered_2_Error_H_", 1, "_Epoch_1000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train.CE)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val.CE)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate")
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
filePath = paste0("results/MLP_Balanced_Filtered_2_Error_H_", 1, "_Epoch_1000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train.CE)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val.CE)
maxValidationError = max(valPlot[,2])
minValidationError = min(valPlot[,2])
maxTrainingError = max(trainPlot[,2])
minTrainingError = min(trainPlot[,2])
minError = min(minValidationError,minTrainingError) - 2
maxError = max(maxTrainingError,maxValidationError) + 2
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,innerMlpResult$epoch),
ylim=c(minError, maxError),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,1000),
ylim=c(minError, maxError),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
plot(valPlot,type="l",col=6, lty = 2, xlab="Epoch", ylab="Error Rate")
lines(trainPlot,col=4,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
plot(valPlot,type="l",col=6, lty = 1, xlab="Epoch", ylab="Error Rate")
lines(trainPlot,col=4,lty = 2, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
debugSource('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
filePath = paste0("results/MLP_Balanced_Filtered_2_Error_H_", 1, "_Epoch_1000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train..)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val..)
maxValidationError = max(valPlot[,2])
minValidationError = min(valPlot[,2])
maxTrainingError = max(trainPlot[,2])
minTrainingError = min(trainPlot[,2])
minError = min(minValidationError,minTrainingError) - 2
maxError = max(maxTrainingError,maxValidationError) + 2
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,1000),
ylim=c(minError, maxError),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
minError = min(minValidationError,minTrainingError) - 0.5
maxError = max(maxTrainingError,maxValidationError) + 0.5
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,1000),
ylim=c(minError, maxError),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
c(0,10)
c(0:10)
c(0:10, 0.1)
c(0.5:1.5)
c(0, seq(-2,2,10), 100)
seq(0)
seq(0,2,100)
seq(0,2, len = 100)
seq(0,100, len = 10)
seq(1,100, len = 10)
c(seq(1,100, len = 10))
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,1000),
ylim=c(seq(minError, maxError, 5)),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
c(seq(minError, maxError, 5))
c(seq(minError, maxError, len = 5))
minError = min(minValidationError,minTrainingError) - 0.5
maxError = max(maxTrainingError,maxValidationError) + 0.5
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,1000),
ylim=c(seq(minError, maxError, len = 5)),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
c(seq(minError, maxError, len = 5))
c(seq(0, 1, len = 10))
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,1000),
ylim=c(seq(0, 1, len = 10)),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,1000),
ylim=c(0.1, 0,2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,1000),
ylim=c(0.1, 0,2),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,1000),
ylim=c(1, 0.2),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,1000),
ylim=c(0.1, 0.2),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate",
xlim=c(0,100, 200, 300, 400, 500),
ylim=c(0.1, 0.2),
axes = FALSE)
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
box()
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate")
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of Hidden Neurons: ", 1))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/term project/plot.R')
for (i in 1:4) {
filePath = paste0("results/Balanced_Filtered_2_Error_K_", i, "_Epoch_1000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train..)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val..)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Error Rate")
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of K: ", i))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
}
for (i in 1:4) {
filePath = paste0("results/Balanced_Filtered_2_Error_K_", i, "_Epoch_1000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train..)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val..)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Success Rate")
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of K: ", i))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
}
for (i in 3:9) {
filePath = paste0("results/Balanced_Full_Error_K_", i, "_Epoch_4000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train..)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val..)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Success Rate")
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of K: ", i))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
}
#plot unbalanced data with full set
for (i in 3:10) {
filePath = paste0("results/UnBalanced_Full_Error_K_", i, "_Epoch_4000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train..)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val..)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Success Rate")
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of K: ", i))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
}
for (i in 3:9) {
filePath = paste0("results/UnBalanced_Full_Error_K_", i, "_Epoch_4000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train..)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val..)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Success Rate")
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of K: ", i))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
}
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train..)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val..)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Success Rate", ylim=c(0.8,0.9,0.95, 0.99))
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of K: ", i))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Success Rate", ylim=c(0,1))
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Success Rate", ylim=c(0,1))
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of K: ", i))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
filePath = paste0("results/MLP_Balanced_Error_H_10_Epoch_10.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
innerMlpResult
mlpPlot = data.frame(innerMlpResult$epoch, (innerMlpResult$Train.TP + innerMlpResult$Train.TN) /
(innerMlpResult$Train.FP + innerMlpResult$Train.FN + innerMlpResult$Train.TP + innerMlpResult$Train.TN))
mlpPlot
filePath = paste0("results/MLP_Balanced_Error_H_10_Epoch_10.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
mlpPlot = data.frame(innerMlpResult$epoch, (innerMlpResult$Train.TP + innerMlpResult$Train.TN) /
(innerMlpResult$Train.FP + innerMlpResult$Train.FN + innerMlpResult$Train.TP + innerMlpResult$Train.TN),
(innerMlpResult$Val.TP + innerMlpResult$Val.TN) /
(innerMlpResult$Val.FP + innerMlpResult$Val.FN + innerMlpResult$Val.TP + innerMlpResult$Val.TN)
mlpPlot = data.frame(innerMlpResult$epoch, (innerMlpResult$Train.TP + innerMlpResult$Train.TN) /
(innerMlpResult$Train.FP + innerMlpResult$Train.FN + innerMlpResult$Train.TP + innerMlpResult$Train.TN),
(innerMlpResult$Val.TP + innerMlpResult$Val.TN) /
(innerMlpResult$Val.FP + innerMlpResult$Val.FN + innerMlpResult$Val.TP + innerMlpResult$Val.TN)
)
filePath = paste0("results/MLP_Balanced_Error_H_10_Epoch_10.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
mlpPlot = data.frame(innerMlpResult$epoch, (innerMlpResult$Train.TP + innerMlpResult$Train.TN) /
(innerMlpResult$Train.FP + innerMlpResult$Train.FN + innerMlpResult$Train.TP + innerMlpResult$Train.TN),
(innerMlpResult$Val.TP + innerMlpResult$Val.TN) /
(innerMlpResult$Val.FP + innerMlpResult$Val.FN + innerMlpResult$Val.TP + innerMlpResult$Val.TN)
)
mlpPlot
colnames(mlpPlot) <- c("Epoch", "Train", "Val")
mlpPlot
colnames(mlpPlot) <- c("Epoch", "Train", "Val")
trainPlot = data.frame(mlpPlot$Epoch, mlpPlot$Train)
valPlot = data.frame(mlpPlot$Epoch, mlpPlot$Val)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Success Rate", ylim=c(0,1))
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of K: ", i))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Success Rate", ylim=c(0,1))
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of H: ", 10))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
for (i in 1:4) {
filePath = paste0("results/Balanced_Filtered_2_Error_K_", i, "_Epoch_1000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train..)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val..)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Success Rate")
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of K: ", i))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
}
View(innerMlpResult)
for (i in 1:3) {
filePath = paste0("results/Balanced_Filtered_2_Error_K_", i, "_Epoch_1000.csv")
innerMlpResult = read.csv(file=filePath, header=TRUE, sep=",")
trainPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Train..)
valPlot = data.frame(innerMlpResult$epoch, innerMlpResult$Val..)
plot(trainPlot,type="l",col=4, lty = 2, xlab="Epoch", ylab="Success Rate")
lines(valPlot,col=6,lty = 1, pch = 4)
title(paste0("Number of K: ", i))
legend("topright", c("Training", "Validation"), col = c(4, 6),
text.col = "black", lty = c(2,1),
bg = "gray90", cex = 0.5)
}
View(innerMlpResult)
write.csv(innerMlpResult, "test33.csv")
write.csv(innerMlpResult, "test33.csv", sep=";")
write.csv2(innerMlpResult, file ="test34.csv",row.names=FALSE)
View(corrMatrixBalanced)
data.frame(t(corrMatrixBalanced))
data.frame(t(corrMatrix))
write.csv2(data.frame(t(corrMatrix)), file ="test35.csv",row.names=FALSE)
