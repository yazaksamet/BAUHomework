#
#functions
#
#########################
sigmoid <- function(n)
{
sig <- 1 / (1 + exp(-n))
return (sig)
}
#########################
#
#execute
#
#########################
trainingData = read.table(trainingDirectory)
colnames(trainingData) <- c("Input","Output")
testData = read.table(validationDirectory)
colnames(testData ) <- c("Input","Output")
#plot(trainingData, col = "blue")
#points(testData, col = "green")
inputWeight = matrix(sample(c(-100:100), 1*numberOfInputWeights, TRUE)/10000, 1, numberOfInputWeights)
hiddenWeight = matrix(sample(c(-100:100), 1*numberOfHiddenWeights, TRUE)/10000, 1, numberOfHiddenWeights)
for (e in 1:epoch)
{
for(i in 1:dim(trainingData)[1])  # for each row
{
print(trainingData[i,1])
}
}
inputWeight
hiddenWeight
#########################
#
#Starter parameters
#
#########################
## working directory
workingDirectory = "C:\\Users\\sametyazak\\Desktop\\bau\\2016 - Spring\\ann\\Homework1-Imp"
trainingDirectory = paste(workingDirectory , "d_reg_tra.txt", sep="\\")
validationDirectory = paste(workingDirectory , "d_reg_val.txt", sep="\\")
## hyper parameters
numberOfInputAttr = 1
numberOfOutputNodes = 1
numberOfHiddenUnits = 3
epoch = 1
biasUnitValue = 1
learningRate = 0.2
## the others
numberOfInputWeights = numberOfInputAttr + 1
numberOfHiddenWeights = numberOfHiddenUnits + 1
#########################
#
#functions
#
#########################
sigmoid <- function(n)
{
sig <- 1 / (1 + exp(-n))
return (sig)
}
#########################
#
#execute
#
#########################
trainingData = read.table(trainingDirectory)
colnames(trainingData) <- c("Input","Output")
testData = read.table(validationDirectory)
colnames(testData ) <- c("Input","Output")
#plot(trainingData, col = "blue")
#points(testData, col = "green")
inputWeight = matrix(sample(c(-100:100), 1*numberOfInputWeights, TRUE)/10000, 1, numberOfInputWeights)
hiddenWeight = matrix(sample(c(-100:100), 1*numberOfHiddenWeights, TRUE)/10000, 1, numberOfHiddenWeights)
for (e in 1:epoch)
{
for(i in 1:dim(trainingData)[1])  # for each row
{
#print(trainingData[i,1])
}
}
#########################
#
#Starter parameters
#
#########################
## working directory
workingDirectory = "C:\\Users\\sametyazak\\Desktop\\bau\\2016 - Spring\\ann\\Homework1-Imp"
trainingDirectory = paste(workingDirectory , "d_reg_tra.txt", sep="\\")
validationDirectory = paste(workingDirectory , "d_reg_val.txt", sep="\\")
## hyper parameters
numberOfInputAttr = 1
numberOfOutputNodes = 1
numberOfHiddenUnits = 3
epoch = 1
biasUnitValue = 1
learningRate = 0.2
## the others
numberOfTotalInput = numberOfInputAttr + 1
numberOfTotalHiddenUnits = numberOfHiddenUnits + 1
#########################
#
#functions
#
#########################
sigmoid <- function(n)
{
sig <- 1 / (1 + exp(-n))
return (sig)
}
#########################
#
#execute
#
#########################
trainingData = read.table(trainingDirectory)
colnames(trainingData) <- c("Input","Output")
testData = read.table(validationDirectory)
colnames(testData ) <- c("Input","Output")
#plot(trainingData, col = "blue")
#points(testData, col = "green")
inputWeight = matrix(sample(c(-100:100), numberOfTotalInput*numberOfHiddenUnits, TRUE)/10000, numberOfTotalInput, numberOfHiddenUnits)
hiddenWeight = matrix(sample(c(-100:100), numberOfOutputNodes*numberOfTotalHiddenUnits, TRUE)/10000, numberOfOutputNodes, numberOfTotalHiddenUnits)
inputWeight
hiddenWeight
for (e in 1:epoch)
{
for(i in 1:dim(trainingData)[1])  # for each row
{
#print(trainingData[i,1])
}
}
#########################
#
#Starter parameters
#
#########################
## working directory
workingDirectory = "C:\\Users\\sametyazak\\Desktop\\bau\\2016 - Spring\\ann\\Homework1-Imp"
trainingDirectory = paste(workingDirectory , "d_reg_tra.txt", sep="\\")
validationDirectory = paste(workingDirectory , "d_reg_val.txt", sep="\\")
## hyper parameters
numberOfInputAttr = 1
numberOfOutputNodes = 1
numberOfHiddenUnits = 3
epoch = 1
biasUnitValue = 1
learningRate = 0.2
## the others
numberOfTotalInput = numberOfInputAttr + 1
numberOfTotalHiddenUnits = numberOfHiddenUnits + 1
#########################
#
#functions
#
#########################
sigmoid <- function(n)
{
sig <- 1 / (1 + exp(-n))
return (sig)
}
#########################
#
#execute
#
#########################
trainingData = read.table(trainingDirectory)
colnames(trainingData) <- c("Input","Output")
testData = read.table(validationDirectory)
colnames(testData ) <- c("Input","Output")
#plot(trainingData, col = "blue")
#points(testData, col = "green")
inputWeight = matrix(sample(c(-100:100), numberOfTotalInput*numberOfHiddenUnits, TRUE)/10000, numberOfTotalInput, numberOfHiddenUnits)
hiddenWeight = matrix(sample(c(-100:100), numberOfOutputNodes*numberOfTotalHiddenUnits, TRUE)/10000, numberOfOutputNodes, numberOfTotalHiddenUnits)
hiddenValues = matrix(sample(c(0:0), 1*numberOfTotalHiddenUnits, TRUE), 1, numberOfTotalHiddenUnits)
inputWeight
hiddenWeight
hiddenValues
for (e in 1:epoch)
{
for(i in 1:dim(trainingData)[1])  # for each row
{
#print(trainingData[i,1])
}
}
dim(hiddenValues)
dim(hiddenValues)[1]
dim(hiddenValues)[2]
#########################
#
#Starter parameters
#
#########################
## working directory
workingDirectory = "C:\\Users\\sametyazak\\Desktop\\bau\\2016 - Spring\\ann\\Homework1-Imp"
trainingDirectory = paste(workingDirectory , "d_reg_tra.txt", sep="\\")
validationDirectory = paste(workingDirectory , "d_reg_val.txt", sep="\\")
## hyper parameters
numberOfInputAttr = 1
numberOfOutputNodes = 1
numberOfHiddenUnits = 3
epoch = 1
biasUnitValue = 1
learningRate = 0.2
## the others
numberOfTotalInput = numberOfInputAttr + 1
numberOfTotalHiddenUnits = numberOfHiddenUnits + 1
#########################
#
#functions
#
#########################
sigmoid <- function(n)
{
sig <- 1 / (1 + exp(-n))
return (sig)
}
#########################
#
#execute
#
#########################
trainingData = read.table(trainingDirectory)
colnames(trainingData) <- c("Input","Output")
testData = read.table(validationDirectory)
colnames(testData ) <- c("Input","Output")
#plot(trainingData, col = "blue")
#points(testData, col = "green")
inputWeight = matrix(sample(c(-100:100), numberOfTotalInput*numberOfHiddenUnits, TRUE)/10000, numberOfTotalInput, numberOfHiddenUnits)
hiddenWeight = matrix(sample(c(-100:100), numberOfOutputNodes*numberOfTotalHiddenUnits, TRUE)/10000, numberOfOutputNodes, numberOfTotalHiddenUnits)
hiddenValues = matrix(sample(c(0:0), 1*numberOfTotalHiddenUnits, TRUE), 1, numberOfTotalHiddenUnits)
inputWeight
hiddenWeight
hiddenValues
for (e in 1:epoch)
{
for(i in 1:dim(trainingData)[1])  # for each row
{
for (h in 2:dim(hiddenValues)[2])
{
hiddenValues[1][h] = h
}
}
hiddenValues
}
hiddenValues
hiddenValues[1]
hiddenValues[1][1]
hiddenValues[1][2]
hiddenValues[1][3]
hiddenValues[2][1]
hiddenValues[2][1] = 1
hiddenValues
#########################
#
#Starter parameters
#
#########################
## working directory
workingDirectory = "C:\\Users\\sametyazak\\Desktop\\bau\\2016 - Spring\\ann\\Homework1-Imp"
trainingDirectory = paste(workingDirectory , "d_reg_tra.txt", sep="\\")
validationDirectory = paste(workingDirectory , "d_reg_val.txt", sep="\\")
## hyper parameters
numberOfInputAttr = 1
numberOfOutputNodes = 1
numberOfHiddenUnits = 3
epoch = 1
biasUnitValue = 1
learningRate = 0.2
## the others
numberOfTotalInput = numberOfInputAttr + 1
numberOfTotalHiddenUnits = numberOfHiddenUnits + 1
#########################
#
#functions
#
#########################
sigmoid <- function(n)
{
sig <- 1 / (1 + exp(-n))
return (sig)
}
#########################
#
#execute
#
#########################
trainingData = read.table(trainingDirectory)
colnames(trainingData) <- c("Input","Output")
testData = read.table(validationDirectory)
colnames(testData ) <- c("Input","Output")
#plot(trainingData, col = "blue")
#points(testData, col = "green")
inputWeight = matrix(sample(c(-100:100), numberOfTotalInput*numberOfHiddenUnits, TRUE)/10000, numberOfTotalInput, numberOfHiddenUnits)
hiddenWeight = matrix(sample(c(-100:100), numberOfOutputNodes*numberOfTotalHiddenUnits, TRUE)/10000, numberOfOutputNodes, numberOfTotalHiddenUnits)
hiddenValues = matrix(sample(c(0:0), 1*numberOfTotalHiddenUnits, TRUE), 1, numberOfTotalHiddenUnits)
inputWeight
hiddenWeight
hiddenValues
for (e in 1:epoch)
{
for(i in 1:dim(trainingData)[1])  # for each row
{
for (h in 2:dim(hiddenValues)[2])
{
hiddenValues[h][1] = h
}
}
hiddenValues
}
hiddenValues
trainingData[5][1]
trainingData[1][5]
trainingData
trainingData[1]
trainingData[1][5]
trainingData[1,5]
trainingData[5,1]
trainingData[1,1]
trainingData[1,2]
trainingData[1,3]
inputWeight
inputWeight[1,1]
inputWeight[1,2]
inputWeight[2,3]
hiddenValues
hiddenValues[1,1]
hiddenValues[1,2]
#########################
#
#Starter parameters
#
#########################
## working directory
workingDirectory = "C:\\Users\\sametyazak\\Desktop\\bau\\2016 - Spring\\ann\\Homework1-Imp"
trainingDirectory = paste(workingDirectory , "d_reg_tra.txt", sep="\\")
validationDirectory = paste(workingDirectory , "d_reg_val.txt", sep="\\")
## hyper parameters
numberOfInputAttr = 1
numberOfOutputNodes = 1
numberOfHiddenUnits = 3
epoch = 1
biasUnitValue = 1
learningRate = 0.2
## the others
numberOfTotalInput = numberOfInputAttr + 1
numberOfTotalHiddenUnits = numberOfHiddenUnits + 1
#########################
#
#functions
#
#########################
sigmoid <- function(n)
{
sig <- 1 / (1 + exp(-n))
return (sig)
}
calculateHiddenValue <- function(h, i)
{
hiddenValue = (trainingData[i,1] * inputWeight[2,h]) + (1 * inputWeight[1,h])
}
#########################
#
#execute
#
#########################
trainingData = read.table(trainingDirectory)
colnames(trainingData) <- c("Input","Output")
testData = read.table(validationDirectory)
colnames(testData ) <- c("Input","Output")
#plot(trainingData, col = "blue")
#points(testData, col = "green")
inputWeight = matrix(sample(c(-100:100), numberOfTotalInput*numberOfHiddenUnits, TRUE)/10000, numberOfTotalInput, numberOfHiddenUnits)
hiddenWeight = matrix(sample(c(-100:100), numberOfOutputNodes*numberOfTotalHiddenUnits, TRUE)/10000, numberOfOutputNodes, numberOfTotalHiddenUnits)
hiddenValues = matrix(sample(c(0:0), 1*numberOfTotalHiddenUnits, TRUE), 1, numberOfTotalHiddenUnits)
inputWeight
hiddenWeight
hiddenValues
for (e in 1:epoch)
{
for(i in 1:dim(trainingData)[1])  # for each row
{
for (h in 2:dim(hiddenValues)[2])
{
hiddenNodeIndex = h - 1
hiddenValues[1,h] = calculateHiddenValue(hiddenNodeIndex, i)
}
}
}
hiddenValues
#########################
#
#Starter parameters
#
#########################
## working directory
workingDirectory = "C:\\Users\\sametyazak\\Desktop\\bau\\2016 - Spring\\ann\\Homework1-Imp"
trainingDirectory = paste(workingDirectory , "d_reg_tra.txt", sep="\\")
validationDirectory = paste(workingDirectory , "d_reg_val.txt", sep="\\")
## hyper parameters
numberOfInputAttr = 1
numberOfOutputNodes = 1
numberOfHiddenUnits = 3
epoch = 1
biasUnitValue = 1
learningRate = 0.2
## the others
numberOfTotalInput = numberOfInputAttr + 1
numberOfTotalHiddenUnits = numberOfHiddenUnits + 1
#########################
#
#functions
#
#########################
sigmoid <- function(n)
{
sig <- 1 / (1 + exp(-n))
return (sig)
}
calculateHiddenValue <- function(h, i)
{
hiddenValue = (trainingData[i,1] * inputWeight[2,h]) + (biasUnitValue * inputWeight[1,h])
}
#########################
#
#execute
#
#########################
trainingData = read.table(trainingDirectory)
colnames(trainingData) <- c("Input","Output")
testData = read.table(validationDirectory)
colnames(testData ) <- c("Input","Output")
#plot(trainingData, col = "blue")
#points(testData, col = "green")
inputWeight = matrix(sample(c(-100:100), numberOfTotalInput*numberOfHiddenUnits, TRUE)/10000, numberOfTotalInput, numberOfHiddenUnits)
hiddenWeight = matrix(sample(c(-100:100), numberOfOutputNodes*numberOfTotalHiddenUnits, TRUE)/10000, numberOfOutputNodes, numberOfTotalHiddenUnits)
hiddenValues = matrix(sample(c(0:0), 1*numberOfTotalHiddenUnits, TRUE), 1, numberOfTotalHiddenUnits)
hiddenValues[1,1] = biasUnitValue
inputWeight
hiddenWeight
hiddenValues
for (e in 1:epoch)
{
for(i in 1:dim(trainingData)[1])  # for each row
{
for (h in 2:dim(hiddenValues)[2])
{
hiddenNodeIndex = h - 1
hiddenValues[1,h] = calculateHiddenValue(hiddenNodeIndex, i)
}
}
}
hiddenValues
hiddenWeight[1,3]
hiddenWeight[1,3]*10
hiddenWeight[1,3]
hiddenWeight *  hiddenValues
help(rowsum)
x <- matrix(runif(100), ncol = 5)
group <- sample(1:8, 20, TRUE)
(xsum <- rowsum(x, group))
x <- matrix(runif(100), ncol = 5)
x
group <- sample(1:8, 20, TRUE)
group
(xsum <- rowsum(x, group))
xsum
help(sum)
hiddenWeight *  hiddenValues
sum(hiddenWeight *  hiddenValues)
calculateOutput <- function()
{
output <- sum(hiddenWeight *  hiddenValues)
return (output)
}
calculateOutput()
calculateOutput <- function()
{
output <- sum(hiddenWeight *  hiddenValues)
}
calculateOutput()
hiddenWeight
hiddenWeight[,-1]
matrix(1,0,0,0)
matrix(0:0,1,4)
hiddenValues
inputWeight
hiddenWeight
hiddenWeight * 0.
hiddenWeight * 0.1
hiddenWeight + 0.1
hiddenWeight + matrix(1:1,1,4)
q()
sigmoid <- function(n)
{
sig <- 1 / (1 + exp(-n))
return (sig)
}
sigmoid(0.5)
sigmoid(0)
sigmoid(-0.1)
sigmoid(-0.5)
setwd("C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/Assignment2")
trainingData = read.table("d_reg_tra.txt")
colnames(trainingData) <- c("Input","Output")
testData = read.table("d_reg_val.txt")
colnames(testData ) <- c("Input","Output")
View(trainingData)
View(trainingData)
View(testData)
plot(testData)
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/Assignment2/rbf_assg2.R')
source('C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Spring/ann/Assignment2/rbf_assg2.R')
